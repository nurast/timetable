<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('Managercycle', 'doctrine');

/**
 * BaseManagercycle
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property integer $cycle_id
 * @property date $start
 * @property date $finish
 * @property integer $students
 * @property integer $students_comm
 * @property integer $five
 * @property integer $four
 * @property integer $three
 * @property integer $two
 * @property string $notpassed
 * @property integer $budjet_id
 * @property integer $month
 * @property integer $plan_id
 * @property integer $manager_id
 * @property integer $joint1
 * @property integer $joint2
 * @property integer $place_id
 * @property integer $table_month
 * @property integer $satisfaction
 * @property BudgetRef $BudgetRef
 * @property PlanRef $PlanRef
 * @property TeacherRef $TeacherRef
 * @property PlaceRef $PlaceRef
 * @property CycleRef $CycleRef
 * @property Doctrine_Collection $ManagercycleTeacher
 * 
 * @method integer             getId()                  Returns the current record's "id" value
 * @method integer             getCycleId()             Returns the current record's "cycle_id" value
 * @method date                getStart()               Returns the current record's "start" value
 * @method date                getFinish()              Returns the current record's "finish" value
 * @method integer             getStudents()            Returns the current record's "students" value
 * @method integer             getStudentsComm()        Returns the current record's "students_comm" value
 * @method integer             getFive()                Returns the current record's "five" value
 * @method integer             getFour()                Returns the current record's "four" value
 * @method integer             getThree()               Returns the current record's "three" value
 * @method integer             getTwo()                 Returns the current record's "two" value
 * @method string              getNotpassed()           Returns the current record's "notpassed" value
 * @method integer             getBudjetId()            Returns the current record's "budjet_id" value
 * @method integer             getMonth()               Returns the current record's "month" value
 * @method integer             getPlanId()              Returns the current record's "plan_id" value
 * @method integer             getManagerId()           Returns the current record's "manager_id" value
 * @method integer             getJoint1()              Returns the current record's "joint1" value
 * @method integer             getJoint2()              Returns the current record's "joint2" value
 * @method integer             getPlaceId()             Returns the current record's "place_id" value
 * @method integer             getTableMonth()          Returns the current record's "table_month" value
 * @method integer             getSatisfaction()        Returns the current record's "satisfaction" value
 * @method BudgetRef           getBudgetRef()           Returns the current record's "BudgetRef" value
 * @method PlanRef             getPlanRef()             Returns the current record's "PlanRef" value
 * @method TeacherRef          getTeacherRef()          Returns the current record's "TeacherRef" value
 * @method PlaceRef            getPlaceRef()            Returns the current record's "PlaceRef" value
 * @method CycleRef            getCycleRef()            Returns the current record's "CycleRef" value
 * @method Doctrine_Collection getManagercycleTeacher() Returns the current record's "ManagercycleTeacher" collection
 * @method Managercycle        setId()                  Sets the current record's "id" value
 * @method Managercycle        setCycleId()             Sets the current record's "cycle_id" value
 * @method Managercycle        setStart()               Sets the current record's "start" value
 * @method Managercycle        setFinish()              Sets the current record's "finish" value
 * @method Managercycle        setStudents()            Sets the current record's "students" value
 * @method Managercycle        setStudentsComm()        Sets the current record's "students_comm" value
 * @method Managercycle        setFive()                Sets the current record's "five" value
 * @method Managercycle        setFour()                Sets the current record's "four" value
 * @method Managercycle        setThree()               Sets the current record's "three" value
 * @method Managercycle        setTwo()                 Sets the current record's "two" value
 * @method Managercycle        setNotpassed()           Sets the current record's "notpassed" value
 * @method Managercycle        setBudjetId()            Sets the current record's "budjet_id" value
 * @method Managercycle        setMonth()               Sets the current record's "month" value
 * @method Managercycle        setPlanId()              Sets the current record's "plan_id" value
 * @method Managercycle        setManagerId()           Sets the current record's "manager_id" value
 * @method Managercycle        setJoint1()              Sets the current record's "joint1" value
 * @method Managercycle        setJoint2()              Sets the current record's "joint2" value
 * @method Managercycle        setPlaceId()             Sets the current record's "place_id" value
 * @method Managercycle        setTableMonth()          Sets the current record's "table_month" value
 * @method Managercycle        setSatisfaction()        Sets the current record's "satisfaction" value
 * @method Managercycle        setBudgetRef()           Sets the current record's "BudgetRef" value
 * @method Managercycle        setPlanRef()             Sets the current record's "PlanRef" value
 * @method Managercycle        setTeacherRef()          Sets the current record's "TeacherRef" value
 * @method Managercycle        setPlaceRef()            Sets the current record's "PlaceRef" value
 * @method Managercycle        setCycleRef()            Sets the current record's "CycleRef" value
 * @method Managercycle        setManagercycleTeacher() Sets the current record's "ManagercycleTeacher" collection
 * 
 * @package    timetable
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseManagercycle extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('managercycle');
        $this->hasColumn('id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('cycle_id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('start', 'date', 25, array(
             'type' => 'date',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 25,
             ));
        $this->hasColumn('finish', 'date', 25, array(
             'type' => 'date',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 25,
             ));
        $this->hasColumn('students', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('students_comm', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('five', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0',
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('four', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0',
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('three', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0',
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('two', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0',
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('notpassed', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 255,
             ));
        $this->hasColumn('budjet_id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('month', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('plan_id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0',
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('manager_id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '7',
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('joint1', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '-1',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('joint2', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '-1',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('place_id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0',
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('table_month', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('satisfaction', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0',
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('BudgetRef', array(
             'local' => 'budjet_id',
             'foreign' => 'id'));

        $this->hasOne('PlanRef', array(
             'local' => 'plan_id',
             'foreign' => 'id'));

        $this->hasOne('TeacherRef', array(
             'local' => 'manager_id',
             'foreign' => 'id'));

        $this->hasOne('PlaceRef', array(
             'local' => 'place_id',
             'foreign' => 'id'));

        $this->hasOne('CycleRef', array(
             'local' => 'cycle_id',
             'foreign' => 'id'));

        $this->hasMany('ManagercycleTeacher', array(
             'local' => 'id',
             'foreign' => 'managercycle_id'));
    }
}